nodeimage: &nodeimage
  docker:
    - image: node:10-alpine
dependencies: &dependencies
  run:
    name: Add Dependencies
    command: apk add --no-cache --update curl git python py-pip

version: 2.1
jobs:
  check-commit-dev:
    <<: *nodeimage
    steps:
      - checkout
      - *dependencies
      - run:
          name: Install & Build Helloworld
          command: npm install
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check if else for choose script to deploy
          command: |
            set -e
            # LASTEST_COMMIT=$(git rev-parse HEAD)
            # BACKEND_COMMIT=$(git log -1 --format=format:%H --full-diff ./backend)
            # FRONTEND_COMMIT=$(git log -1 --format=format:%H --full-diff ./frontend)
            LASTEST_COMMIT=DEF
            BACKEND_COMMIT=ABC
            FRONTEND_COMMIT=DEF
            if [ $BACKEND_COMMIT = $LASTEST_COMMIT ];
                then
                  echo "Backend is latest commit"
            elif [ $FRONTEND_COMMIT = $LASTEST_COMMIT ];
                then
                  echo "Frontend is latest commit"
                  pwd
                  ls -a
                  chmod +x frontend-dev.sh
                  sh frontend-dev.sh
            else
                echo "no folder of latest commit"
                exit 0;
            fi
  check-commit-stagging:
    <<: *nodeimage
    steps:
      - checkout
      - *dependencies
      - run:
          name: Install & Build Helloworld
          command: npm install
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check if else for choose script to deploy
          command: |
            set -e
            # LASTEST_COMMIT=$(git rev-parse HEAD)
            # BACKEND_COMMIT=$(git log -1 --format=format:%H --full-diff ./backend)
            # FRONTEND_COMMIT=$(git log -1 --format=format:%H --full-diff ./frontend)
            LASTEST_COMMIT=123456
            BACKEND_COMMIT=000000
            FRONTEND_COMMIT=123456
            if [ $BACKEND_COMMIT = $LASTEST_COMMIT ];
                then
                  echo "Backend is latest commit stagging"
            elif [ $FRONTEND_COMMIT = $LASTEST_COMMIT ];
                then
                  echo "Frontend is latest commit stagging"
            else
                echo "no folder of latest commit stagging"
                exit 0;
            fi
workflows:
  version: 2
  deploy:
    jobs:
      - check-commit-dev:
          filters:
            branches:
              only: master
      - check-commit-stagging:
          filtes:
            branches:
              only: dev

          
